{"version":3,"sources":["webpack:///./src/app/layout/crm/customer-details/customer-details-routing.module.ts","webpack:///./src/app/layout/crm/customer-details/customer-details.component.html","webpack:///./src/app/layout/crm/customer-details/customer-details.component.scss","webpack:///./src/app/layout/crm/customer-details/customer-details.component.ts","webpack:///./src/app/layout/crm/customer-details/customer-details.module.ts","webpack:///./src/app/layout/crm/customer-details/customer-details.service.ts"],"names":[],"mappings":"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","file":"customer-details-customer-details-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CustomerDetailsComponent } from './customer-details.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path:'',\r\n    component:CustomerDetailsComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CustomerDetailsRoutingModule { }\r\n","module.exports = \"<div class=\\\"mb-20\\\"><h1 class=\\\"mat-card-title\\\">Patient Details</h1></div>\\r\\n<mat-card class=\\\"PatientDetailMain\\\">\\r\\n  <mat-tab-group backgroundColor=\\\"warn\\\" dynamicHeight animationDuration=\\\"1000ms\\\">\\r\\n    <mat-tab label=\\\"Basic Details\\\">\\r\\n      <mat-card class=\\\"TabsContents\\\">\\r\\n        <!-- ROW 1 -->\\r\\n        <div class=\\\"\\\" fxFlex fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"20px\\\">\\r\\n          <!-- 1 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>First Name</mat-label>\\r\\n              <input matInput placeholder=\\\"First Name\\\" [(ngModel)]=\\\"CustomerBasicDetailsCustomer.FirstName\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 2 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Last Name</mat-label>\\r\\n              <input matInput placeholder=\\\"Last Name\\\" [(ngModel)]=\\\"CustomerBasicDetailsCustomer.LastName\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 3 -->\\r\\n          <!-- <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Registration ID</mat-label>\\r\\n              <input matInput placeholder=\\\"Placeholder\\\" />\\r\\n            </mat-form-field>\\r\\n          </div> -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Civil ID</mat-label>\\r\\n              <input matInput placeholder=\\\"Civil ID\\\" [(ngModel)]=\\\"CustomerBasicDetailsCustomer.CivilId\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n        <!-- ROW 2 -->\\r\\n        <div class=\\\"\\\" fxFlex fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"20px\\\">\\r\\n          <!-- 1 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Subscribed Chef</mat-label>\\r\\n              <mat-select [(ngModel)]=\\\"CustomerBasicDetailsCustomer.ChefId\\\">\\r\\n                <mat-option *ngFor=\\\"let item of Chef\\\" [value]=\\\"item.ChefId\\\">{{ item.ChefName }}</mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 2 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Job Title</mat-label>\\r\\n              <input matInput placeholder=\\\"Job Title\\\" [(ngModel)]=\\\"CustomerBasicDetailsCustomer.JobTitle\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 3 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Gender</mat-label>\\r\\n              <mat-select placeholder=\\\"Select Gender\\\" [(ngModel)]=\\\"CustomerBasicDetailsCustomer.GenderId\\\">\\r\\n                <mat-option *ngFor=\\\"let item of Gender\\\" [value]=\\\"item.GenderId\\\">{{ item.GenderName }}</mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Nationality</mat-label>\\r\\n              <mat-select placeholder=\\\"Select Nationality\\\">\\r\\n                <mat-option *ngFor=\\\"let item of Country\\\" value=\\\"item.countryId\\\">{{item.countryName}}</mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n          </div> -->\\r\\n        </div>\\r\\n        <div class=\\\"\\\" fxFlex fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"20px\\\">\\r\\n          <!-- 1 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Birth Date </mat-label>\\r\\n              <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"mm/dd/yyyy\\\" [(ngModel)]=\\\"CustomerBasicDetailsCustomer.BirthDate\\\" />\\r\\n              <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n              <mat-datepicker #picker></mat-datepicker>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 2 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Marital Status</mat-label>\\r\\n              <mat-select [(ngModel)]=\\\"CustomerBasicDetailsCustomer.MaritalStatusId\\\">\\r\\n                <mat-option *ngFor=\\\"let item of MaritalStatus\\\" [value]=\\\"item.MaritalStatusId\\\">\\r\\n                  {{ item.MaritalStatusName }}\\r\\n                </mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 3 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Email</mat-label>\\r\\n              <input email matInput placeholder=\\\"Email\\\" [(ngModel)]=\\\"Customer.EmailAddress\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 4 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Mobile</mat-label>\\r\\n              <input matInput placeholder=\\\"Phone\\\" [(ngModel)]=\\\"Customer.MobileNo\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"\\\" fxFlex fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"40\\\">\\r\\n          <!-- 1 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [24]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mr-20\\\">\\r\\n              <mat-label>Phone No</mat-label>\\r\\n              <input class=\\\"w-100\\\" matInput placeholder=\\\"Mobile Number\\\" [(ngModel)]=\\\"CustomerBasicDetailsCustomer.AlternatePhone\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n      </mat-card>\\r\\n    </mat-tab>\\r\\n    <mat-tab label=\\\"Allergies\\\">\\r\\n      <mat-card class=\\\"TabsContents\\\">\\r\\n        <!-- <mat-card-subtitle>Allergies</mat-card-subtitle> -->\\r\\n        <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mr-20\\\">\\r\\n          <mat-label>Add Allergies</mat-label>\\r\\n          <input class=\\\"w-100\\\" matInput placeholder=\\\"Allergies\\\" [(ngModel)]=\\\"CustomerPhysicalsCustomer.CommonAllergies\\\" />\\r\\n        </mat-form-field>\\r\\n        <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mr-20\\\">\\r\\n          <mat-label>Food Allergies</mat-label>\\r\\n          <input class=\\\"w-100\\\" matInput placeholder=\\\"Food Allergies\\\" [(ngModel)]=\\\"CustomerPhysicalsCustomer.FoodBasedAllergies\\\" />\\r\\n        </mat-form-field>\\r\\n      </mat-card>\\r\\n    </mat-tab>\\r\\n    <mat-tab label=\\\"Physical Measurements\\\">\\r\\n      <mat-card class=\\\"TabsContents\\\">\\r\\n        <!-- ROW 1 -->\\r\\n        <div class=\\\"\\\" fxFlex fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"20px\\\">\\r\\n          <!-- 1 -->\\r\\n\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Height (CM) </mat-label>\\r\\n              <input matInput placeholder=\\\"Height\\\" [(ngModel)]=\\\"CustomerHealthMeasuresCustomer.Height\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 2 -->\\r\\n\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Weight(KG) </mat-label>\\r\\n              <input matInput placeholder=\\\"Weight\\\" [(ngModel)]=\\\"CustomerHealthMeasuresCustomer.Weight\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 3 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Waist(CM)</mat-label>\\r\\n              <input matInput placeholder=\\\"Waist\\\" [(ngModel)]=\\\"CustomerHealthMeasuresCustomer.Waist\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 4 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Automatic BMI</mat-label>\\r\\n              <input\\r\\n                matInput\\r\\n                placeholder=\\\"Placeholder\\\"\\r\\n                readonly=\\\"true\\\"\\r\\n                [value]=\\\"\\r\\n                  (\\r\\n                    CustomerHealthMeasuresCustomer.Weight /\\r\\n                    ((CustomerHealthMeasuresCustomer.Height / 100) * (CustomerHealthMeasuresCustomer.Height / 100))\\r\\n                  ).toFixed(2)\\r\\n                \\\"\\r\\n              />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n      </mat-card>\\r\\n    </mat-tab>\\r\\n    <mat-tab label=\\\"Clinical  History\\\">\\r\\n      <mat-card class=\\\"TabsContents\\\">\\r\\n        <!-- ROW 1 -->\\r\\n        <div class=\\\"\\\" fxFlex fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"20px\\\">\\r\\n          <!-- 1 -->\\r\\n\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [33.33]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Current diseases/disorders </mat-label>\\r\\n              <textarea matInput placeholder=\\\"Current Disease\\\" [(ngModel)]=\\\"CustomerPhysicalsCustomer.CurrentDisease\\\"></textarea>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 2 -->\\r\\n\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [33.33]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Family members diseases</mat-label>\\r\\n              <textarea\\r\\n                matInput\\r\\n                placeholder=\\\"Family members diseases\\\"\\r\\n                [(ngModel)]=\\\"CustomerPhysicalsCustomer.FamilyMemberDiseases\\\"\\r\\n              ></textarea>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 3 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [33.33]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label> Current Medicines</mat-label>\\r\\n              <textarea matInput placeholder=\\\"Current Medicines\\\" [(ngModel)]=\\\"CustomerPhysicalsCustomer.CurrentMedicines\\\"></textarea>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n      </mat-card>\\r\\n    </mat-tab>\\r\\n\\r\\n    <mat-tab label=\\\"Food Interests\\\">\\r\\n      <mat-card class=\\\"TabsContents\\\">\\r\\n        <!-- ROW 1 -->\\r\\n        <div class=\\\"\\\" fxFlex fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"20px\\\">\\r\\n          <!-- 1 -->\\r\\n\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [33.33]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Interested food items </mat-label>\\r\\n              <mat-chip-list #chipList>\\r\\n                <mat-chip\\r\\n                  *ngFor=\\\"let fruit of InterestedFood\\\"\\r\\n                  [selectable]=\\\"selectable\\\"\\r\\n                  [removable]=\\\"removable\\\"\\r\\n                  (removed)=\\\"removeInt(fruit)\\\"\\r\\n                >\\r\\n                  {{ fruit.FoodName }}\\r\\n                  <mat-icon matChipRemove *ngIf=\\\"removable\\\">cancel</mat-icon>\\r\\n                </mat-chip>\\r\\n                <input\\r\\n                  placeholder=\\\"Enter food item\\\"\\r\\n                  #IntFoodInput\\r\\n                  [formControl]=\\\"foodCtrl\\\"\\r\\n                  [matAutocomplete]=\\\"auto\\\"\\r\\n                  [matChipInputFor]=\\\"chipList\\\"\\r\\n                  [matChipInputSeparatorKeyCodes]=\\\"separatorKeysCodes\\\"\\r\\n                />\\r\\n              </mat-chip-list>\\r\\n              <mat-autocomplete autoActiveFirstOption #auto=\\\"matAutocomplete\\\" (optionSelected)=\\\"InterstFoodselected($event)\\\">\\r\\n                <mat-option *ngFor=\\\"let item of (filteredFoods | async)\\\" [value]=\\\"item\\\">\\r\\n                  {{ item.FoodName }}\\r\\n                </mat-option>\\r\\n              </mat-autocomplete>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 2 -->\\r\\n\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [33.33]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Not interested food items </mat-label>\\r\\n              <mat-chip-list #chipList>\\r\\n                <mat-chip\\r\\n                  *ngFor=\\\"let fruit of NotInterestedFood\\\"\\r\\n                  [selectable]=\\\"selectable\\\"\\r\\n                  [removable]=\\\"removable\\\"\\r\\n                  (removed)=\\\"removeNotInt(fruit)\\\"\\r\\n                >\\r\\n                  {{ fruit.FoodName }}\\r\\n                  <mat-icon matChipRemove *ngIf=\\\"removable\\\">cancel</mat-icon>\\r\\n                </mat-chip>\\r\\n                <input\\r\\n                  placeholder=\\\"Enter food item\\\"\\r\\n                  #NotIntFoodInput\\r\\n                  [formControl]=\\\"foodCtrl\\\"\\r\\n                  [matAutocomplete]=\\\"auto\\\"\\r\\n                  [matChipInputFor]=\\\"chipList\\\"\\r\\n                  [matChipInputSeparatorKeyCodes]=\\\"separatorKeysCodes\\\"\\r\\n                />\\r\\n              </mat-chip-list>\\r\\n              <mat-autocomplete autoActiveFirstOption #auto=\\\"matAutocomplete\\\" (optionSelected)=\\\"NotInterstFoodselected($event)\\\">\\r\\n                <mat-option *ngFor=\\\"let item of (filteredFoods | async)\\\" [value]=\\\"item\\\">\\r\\n                  {{ item.FoodName }}\\r\\n                </mat-option>\\r\\n              </mat-autocomplete>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 3 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [33.33]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Type of Diet</mat-label>\\r\\n              <mat-select placeholder=\\\"Type of Diet\\\" [(ngModel)]=\\\"CustomerBasicDetailsCustomer.FoodDietTypeId\\\">\\r\\n                <mat-option *ngFor=\\\"let item of FoodDietType\\\" [value]=\\\"item.FoodDietTypeId\\\">{{ item.FoodDietTypeName }}</mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n      </mat-card>\\r\\n    </mat-tab>\\r\\n\\r\\n    <mat-tab label=\\\"Workout Status\\\">\\r\\n      <mat-card class=\\\"TabsContents\\\">\\r\\n        <!-- ROW 1 -->\\r\\n        <div class=\\\"\\\" fxFlex fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"20px\\\">\\r\\n          <!-- 1 -->\\r\\n\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Type of workout</mat-label>\\r\\n              <input matInput placeholder=\\\"Type of workout\\\" [(ngModel)]=\\\"CustomerPhysicalsCustomer.WorkOutType\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 2 -->\\r\\n\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Work hours / day </mat-label>\\r\\n              <input matInput placeholder=\\\"Placeholder\\\" [(ngModel)]=\\\"CustomerPhysicalsCustomer.Frequency\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 4 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Exercises</mat-label>\\r\\n              <input matInput placeholder=\\\"Placeholder\\\" [(ngModel)]=\\\"CustomerPhysicalsCustomer.Excercises\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n      </mat-card>\\r\\n    </mat-tab>\\r\\n    <mat-tab label=\\\"Communication Details\\\">\\r\\n      <mat-card class=\\\"TabsContents\\\">\\r\\n        <!-- ROW 1 -->\\r\\n        <div class=\\\"\\\" fxFlex fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"20px\\\">\\r\\n          <!-- 1 -->\\r\\n\\r\\n          <!-- <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-card-subtitle>Type of work </mat-card-subtitle>\\r\\n            <mat-radio-group appearance=\\\"outline\\\" class=\\\"w-100 mt-40 \\\">\\r\\n              <mat-radio-button value=\\\"1\\\" class=\\\"mr-20\\\">House</mat-radio-button>\\r\\n              <mat-radio-button value=\\\"2\\\">Flat</mat-radio-button>\\r\\n            </mat-radio-group>\\r\\n          </div> -->\\r\\n        </div>\\r\\n\\r\\n        <!-- ROW 2 -->\\r\\n        <div class=\\\"\\\" fxFlex fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"20px\\\">\\r\\n          <!-- 1 -->\\r\\n\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>House </mat-label>\\r\\n              <input matInput placeholder=\\\"Placeholder\\\" [(ngModel)]=\\\"CustomerCommunicationsCustomer.HouseName\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 2 -->\\r\\n\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Avenue </mat-label>\\r\\n              <input matInput placeholder=\\\"Placeholder\\\" [(ngModel)]=\\\"CustomerCommunicationsCustomer.AvenueName\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 3 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Street</mat-label>\\r\\n              <input matInput placeholder=\\\"Placeholder\\\" [(ngModel)]=\\\"CustomerCommunicationsCustomer.StreetName\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 4 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Block</mat-label>\\r\\n              <input matInput placeholder=\\\"Placeholder\\\" [(ngModel)]=\\\"CustomerCommunicationsCustomer.BlockName\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- ROW 2 -->\\r\\n        <div class=\\\" \\\" fxFlex fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"20px\\\">\\r\\n          <!-- 1 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [24]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Country</mat-label>\\r\\n              <mat-select [(ngModel)]=\\\"CustomerCommunicationsCustomer.CountryId\\\" (selectionChange)=\\\"changeCountry($event.value)\\\">\\r\\n                <mat-option *ngFor=\\\"let item of Country\\\" [value]=\\\"item.CountryId\\\">\\r\\n                  {{ item.CountryName }}\\r\\n                </mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [24]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>State </mat-label>\\r\\n              <mat-select [(ngModel)]=\\\"CustomerCommunicationsCustomer.StateId\\\">\\r\\n                <mat-option *ngFor=\\\"let item of States\\\" [value]=\\\"item.StateId\\\">\\r\\n                  {{ item.StateName }}\\r\\n                </mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <!-- 2 -->\\r\\n        </div>\\r\\n      </mat-card>\\r\\n    </mat-tab>\\r\\n    <mat-tab label=\\\"Call History\\\">\\r\\n      <mat-card class=\\\"TabsContents\\\">\\r\\n        <div class=\\\"\\\" fxFlex fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"20px\\\">\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Date</mat-label>\\r\\n              <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Placeholder\\\" [(ngModel)]=\\\"TransactionDate\\\" />\\r\\n              <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n              <mat-datepicker #picker></mat-datepicker>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n            <mat-label>Transaction</mat-label>\\r\\n            <mat-select placeholder=\\\"Select Transaction\\\" [(ngModel)]=\\\"TransactionStatusID\\\" (selectionChange)=\\\"UpdateTransaction()\\\">\\r\\n              <mat-option *ngFor=\\\"let item of CallStatus\\\" value=\\\"{{ item.TransactionStatusId }}\\\">{{\\r\\n                item.TransactionStatusName\\r\\n              }}</mat-option>\\r\\n            </mat-select>\\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n        <table class=\\\"w-100 mat-elevation-z1\\\" mat-table [dataSource]=\\\"CustomerCallHistoryCustomer\\\" >\\r\\n            <ng-container matColumnDef=\\\"TransactionStatusName\\\">\\r\\n                <mat-header-cell *matHeaderCellDef>Transaction Status </mat-header-cell>\\r\\n                <mat-cell *matCellDef=\\\"let element\\\"> {{element.TransactionStatusName}} </mat-cell>\\r\\n              </ng-container>\\r\\n               <ng-container matColumnDef=\\\"TransactionDate\\\">\\r\\n                <mat-header-cell *matHeaderCellDef>Transaction Date </mat-header-cell>\\r\\n                <mat-cell *matCellDef=\\\"let element\\\"> {{element.TransactionDate}} </mat-cell>\\r\\n              </ng-container> \\r\\n              <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\r\\n              <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\r\\n        </table>\\r\\n      </mat-card>\\r\\n    </mat-tab>\\r\\n    <mat-tab label=\\\"Account Details\\\">\\r\\n      <mat-card class=\\\"TabsContents\\\">\\r\\n        <div class=\\\"\\\" fxFlex fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\" fxLayoutGap=\\\"20px\\\">\\r\\n          <!-- 1 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>UserName</mat-label>\\r\\n              <input matInput placeholder=\\\"Username\\\" [(ngModel)]=\\\"Customer.UserName\\\" (change)=\\\"CheckUserNameAvailability()\\\" />\\r\\n            </mat-form-field>\\r\\n            <p>{{ UserNameAvailability }}</p>\\r\\n          </div>\\r\\n          <!-- 2 -->\\r\\n          <div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [25]\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Password</mat-label>\\r\\n              <input type=\\\"password\\\" matInput placeholder=\\\"Password\\\" [(ngModel)]=\\\"Customer.PassWord\\\" />\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </div>\\r\\n      </mat-card>\\r\\n    </mat-tab>\\r\\n  </mat-tab-group>\\r\\n</mat-card>\\r\\n<div [fxFlex]=\\\"i\\\" *ngFor=\\\"let i of [12]\\\">\\r\\n  <div class=\\\"w-100 mt-40\\\">\\r\\n    <button mat-raised-button class=\\\"SaveBtnLg w-100\\\" (click)=\\\"SaveCustomerData()\\\">Save</button>\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \".PatientDetailMain {\\n  padding: 0;\\n  border-radius: 8px;\\n  overflow: hidden; }\\n\\n.TabsContents {\\n  box-shadow: none;\\n  padding: 1.8vmax 1.5vmax 1vmax; }\\n\\n.mr-20 {\\n  padding-right: 20px; }\\n\\n.mt-40 {\\n  margin-top: 40px; }\\n\\n.example-chip-list {\\n  width: 100%; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGF5b3V0L2NybS9jdXN0b21lci1kZXRhaWxzL0Y6XFxzaGFmZWVxJ3NcXGRlaXR0ZWNcXFdFQlxcQURNSU4vc3JjXFxhcHBcXGxheW91dFxcY3JtXFxjdXN0b21lci1kZXRhaWxzXFxjdXN0b21lci1kZXRhaWxzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsVUFBVTtFQUNWLGtCQUFrQjtFQUNsQixnQkFBZ0IsRUFBQTs7QUFHbEI7RUFDRSxnQkFBZ0I7RUFDaEIsOEJBQThCLEVBQUE7O0FBRWhDO0VBQ0UsbUJBQW1CLEVBQUE7O0FBRXJCO0VBQ0UsZ0JBQWdCLEVBQUE7O0FBRWxCO0VBQ0UsV0FBVyxFQUFBIiwiZmlsZSI6InNyYy9hcHAvbGF5b3V0L2NybS9jdXN0b21lci1kZXRhaWxzL2N1c3RvbWVyLWRldGFpbHMuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuUGF0aWVudERldGFpbE1haW4ge1xyXG4gIHBhZGRpbmc6IDA7XHJcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbn1cclxuXHJcbi5UYWJzQ29udGVudHMge1xyXG4gIGJveC1zaGFkb3c6IG5vbmU7XHJcbiAgcGFkZGluZzogMS44dm1heCAxLjV2bWF4IDF2bWF4O1xyXG59XHJcbi5tci0yMCB7XHJcbiAgcGFkZGluZy1yaWdodDogMjBweDtcclxufVxyXG4ubXQtNDAge1xyXG4gIG1hcmdpbi10b3A6IDQwcHg7XHJcbn1cclxuLmV4YW1wbGUtY2hpcC1saXN0IHtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG4iXX0= */\"","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { CustomerDetailsService } from './customer-details.service';\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\nimport { CustomerBasicsDropDowndata, CallTransaction, CustomerBasics, Health, Food } from '../../../shared/commmon/ServiceClass';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MatAutocompleteSelectedEvent, MatChipInputEvent, MatAutocomplete, MatDialog } from '@angular/material';\r\nimport { startWith, map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\nimport { DishPreparationService } from '../../dietitian/dish-preparation/dish-preparation.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DialogueComponent } from '../../../shared/commmon/dialogue/dialogue.component';\r\nimport { DialogueService } from '../../../shared/commmon/dialogue/dialogue.service';\r\nimport { Communication, FoodInterests, CustomerPhysicals } from './customer-data-variable';\r\nimport { CommonService } from 'src/app/shared/services/common.service';\r\n@Component({\r\n  selector: 'app-customer-details',\r\n  templateUrl: './customer-details.component.html',\r\n  styleUrls: ['./customer-details.component.scss']\r\n})\r\nexport class CustomerDetailsComponent implements OnInit {\r\n  // constructor\r\n  constructor(private service: CustomerDetailsService, private food: DishPreparationService,\r\n    private route: ActivatedRoute, public dialog: MatDialog, private popup: DialogueService,\r\n    private common: CommonService) {\r\n    this.GetCustomerDropDown();\r\n    this.UserID = parseInt(this.route.snapshot.paramMap.get('id'));\r\n    if (this.UserID > 0 && this.UserID != null) {\r\n      this.GetCustomerDetailsForCRM();\r\n    }\r\n    this.filteredFoods = this.foodCtrl.valueChanges.pipe(\r\n      startWith(null),\r\n      map((fruit: Food) => fruit ? this._filter(fruit) : this.Allfoods.slice()));\r\n      this.GetAllFood();\r\n  }\r\n\r\n  // variables\r\n  UserID = 0;\r\n  DropDowndata: CustomerBasicsDropDowndata;\r\n  CallStatus: CallTransaction[] = [];\r\n  Country;\r\n  FoodDietType;\r\n  Gender;\r\n  MaritalStatus;\r\n  DataSource;\r\n  Chef;\r\n  States = [];\r\n  CountryID;\r\n  InterstedFoodCtl = new FormControl();\r\n  NotInterestedFoodCtl = new FormControl();\r\n  InterestedFood = [];\r\n  NotInterestedFood = [];\r\n  TransactionDate = new Date;\r\n  TransactionStatusID;\r\n  visible = true;\r\n  selectable = true;\r\n  removable = true;\r\n  addOnBlur = true;\r\n  UserNameAvailability = '';\r\n  readonly separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  CustomerBasicDetailsCustomer: CustomerBasicDetails = {\r\n    AlternatePhone: '',\r\n    BirthDate: '',\r\n    ChefId: '',\r\n    CivilId: '',\r\n    CustomerBasicDetailId: '',\r\n    CustomerId: '',\r\n    FirstName: '',\r\n    FoodDietTypeId: '',\r\n    GenderId: '',\r\n    JobTitle: '',\r\n    LastName: '',\r\n    LastUpdate: '',\r\n    MaritalStatus: '',\r\n    MaritalStatusId: '',\r\n    RegistrationDate: '',\r\n    TransactionStatusId: '',\r\n    UserId: ''\r\n  };\r\n  CustomerCallHistoryCustomer: CallTransaction[] = [];\r\n  CustomerCommunicationsCustomer: Communication[] = [];\r\n  CustomerFoodInterestsCustomer: FoodInterests[] = [];\r\n  CustomerHealthMeasuresCustomer: Health = {\r\n    Height: 0,\r\n    Weight: 0\r\n\r\n  };\r\n  Customer: CustomerBasics = {\r\n    CustomerBasicDetailsCustomer: this.CustomerBasicDetailsCustomer,\r\n    CustomerCallHistoryCustomer: [],\r\n    CustomerCommunicationsCustomer: [],\r\n    CustomerFoodInterestsCustomer: [],\r\n    CustomerHealthMeasuresCustomer: [],\r\n    CustomerPhysicalsCustomer: [],\r\n    MobileNo: '',\r\n    UserId: 0,\r\n    UserName: '',\r\n    PassWord: '',\r\n    UserTypeId: 0,\r\n    IsLocked: 0\r\n  };\r\n\r\n  CustomerPhysicalsCustomer: CustomerPhysicals = {\r\n    CommonAllergies: '',\r\n    FoodBasedAllergies: '',\r\n    CurrentDisease: '',\r\n    FamilyMemberDiseases: '',\r\n    CurrentMedicines: '',\r\n    WorkOutType: '',\r\n    Frequency: '',\r\n    Excercises: '',\r\n    CustomerId: 0,\r\n    CustomerPhysicalId: 0,\r\n    LastUpdate: '',\r\n    Customer: '',\r\n    User: '',\r\n    UserId: 0\r\n  };\r\n  foodCtrl = new FormControl();\r\n  filteredFoods: Observable<string[]>;\r\n  foods = [];\r\n  Allfoods = [];\r\n  SaveStatus = 0;\r\n\r\n  @ViewChild('IntFoodInput') IntFoodInput: ElementRef<HTMLInputElement>;\r\n  @ViewChild('NotIntFoodInput') NotIntFoodInput: ElementRef<HTMLInputElement>;\r\n  @ViewChild('auto') matAutocomplete: MatAutocomplete;\r\n\r\n  displayedColumns: string[] = ['TransactionStatusName', 'TransactionDate'];\r\n\r\n  // remove item from interested food items\r\n  removeInt(fruit): void {\r\n    const index = this.InterestedFood.indexOf(fruit);\r\n    if (index >= 0) {\r\n      this.InterestedFood.splice(index, 1);\r\n      const MainIndex = this.CustomerFoodInterestsCustomer.indexOf(fruit);\r\n        if (MainIndex >= 0) {\r\n          this.CustomerFoodInterestsCustomer.splice(MainIndex, 1);\r\n        }\r\n    }\r\n  }\r\n  // remove item from not interested food items\r\n  removeNotInt(fruit): void {\r\n    const index = this.NotInterestedFood.indexOf(fruit);\r\n    if (index >= 0) {\r\n      this.NotInterestedFood.splice(index, 1);\r\n      const MainIndex = this.CustomerFoodInterestsCustomer.indexOf(fruit);\r\n      if (MainIndex >= 0) {\r\n        this.CustomerFoodInterestsCustomer.splice(MainIndex, 1);\r\n      }\r\n    }\r\n  }\r\n  // fire when an item selected in interested food\r\n  InterstFoodselected(event: MatAutocompleteSelectedEvent): void {\r\n    this.InterestedFood.forEach((element, index) => {\r\n      if (element.FoodName === event.option.value.FoodName) {\r\n        this.InterestedFood.splice(index, 1);\r\n      }\r\n    });\r\n    this.InterestedFood.push(event.option.value);\r\n    this.InterestedFood.forEach((element, index) => {\r\n      this.CustomerFoodInterestsCustomer.push({FoodId: element.FoodId, FoodName: element.FoodName, InterestId: 0});\r\n    });\r\n    this.IntFoodInput.nativeElement.value = '';\r\n    this.foodCtrl.setValue(null);\r\n  }\r\n  // fire when an item selected in not interested food\r\n  NotInterstFoodselected(event: MatAutocompleteSelectedEvent): void {\r\n    this.NotInterestedFood.forEach((element, index) => {\r\n      if (element.FoodName === event.option.value.FoodName) {\r\n        this.NotInterestedFood.splice(index, 1);\r\n      }\r\n    });\r\n    this.NotInterestedFood.push(event.option.value);\r\n    this.NotInterestedFood.forEach((element, index) => {\r\n      this.CustomerFoodInterestsCustomer.push({FoodId: element.FoodId, FoodName: element.FoodName, InterestId: 0});\r\n    });\r\n    this.NotIntFoodInput.nativeElement.value = '';\r\n    this.NotInterestedFoodCtl.setValue(null);\r\n  }\r\n  // food filter\r\n  private _filter(value): string[] {\r\n    const filterValue = value;\r\n    return this.Allfoods.filter(food => food.FoodName.toLowerCase().indexOf(filterValue) === 0);\r\n  }\r\n  // food display function for autocomplete\r\n  IngredientdisplayFn(food?: Food): string | undefined {\r\n    return food ? food.FoodName : undefined;\r\n  }\r\n  // get dropdown for customer form\r\n  GetCustomerDropDown() {\r\n      this.service.GetCustomerDetailsDropdowns().subscribe(Response => {\r\n      this.DropDowndata = Response.data;\r\n      const source = this.DropDowndata;\r\n      this.CallStatus = source.CallStatus;\r\n      this.Country = source.Country;\r\n      this.FoodDietType = source.FoodDietType;\r\n      this.Gender = source.Gender;\r\n      this.MaritalStatus = source.MaritalStatus;\r\n      this.Chef = source.Chef;\r\n      this.Country.forEach(element => {\r\n         const StatesIn = element.States;\r\n         StatesIn.forEach(element => {\r\n           this.States.push(element);\r\n         });\r\n      });\r\n    });\r\n  }\r\n  // get all foods\r\n  GetAllFood() {\r\n    this.food.GetAllIngredients().subscribe(Response => {\r\n      this.Allfoods = Response;\r\n    });\r\n  }\r\n  // get states according to country\r\n  changeCountry(countryId) {\r\n    this.States = this.Country.find(con => con.CountryId === countryId).States;\r\n  }\r\n  // check username availability\r\n  CheckUserNameAvailability() {\r\n    const UserName = this.Customer.UserName;\r\n    this.UserNameAvailability = 'Please wait';\r\n    this.common.CheckUserNameAvailability(UserName, this.UserID).subscribe(Response => {\r\n        if (Response.Status === true) {\r\n          this.UserNameAvailability = 'UserNameAvailable';\r\n          this.SaveStatus = 0;\r\n        } else {\r\n          this.UserNameAvailability = 'UserNameNotAvailable';\r\n          this.SaveStatus = 1;\r\n        }\r\n    });\r\n  }\r\n  // get customer details\r\n  GetCustomerDetailsForCRM() {\r\n    this.service.GetCustomerDetailsForCRM(this.UserID).subscribe(Response => {\r\n      this.Customer.UserId = Response.UserId;\r\n      this.Customer.MobileNo = Response.MobileNo;\r\n      this.Customer.UserName = Response.UserName;\r\n      this.Customer.IsLocked = Response.IsLocked;\r\n      this.Customer.UserTypeId = Response.UserTypeId;\r\n      if (Response.CustomerBasicDetailsCustomer.length > 0) {\r\n        this.CustomerBasicDetailsCustomer = Response.CustomerBasicDetailsCustomer[0];\r\n      }\r\n      if (Response.CustomerHealthMeasuresCustomer.length > 0) {\r\n        this.CustomerHealthMeasuresCustomer = Response.CustomerHealthMeasuresCustomer[0];\r\n      }\r\n      if (Response.CustomerPhysicalsCustomer.length > 0) {\r\n        this.CustomerPhysicalsCustomer = Response.CustomerPhysicalsCustomer[0];\r\n      }\r\n      if (Response.CustomerCommunicationsCustomer.length > 0) {\r\n        this.CustomerCommunicationsCustomer = Response.CustomerCommunicationsCustomer[0];\r\n      }\r\n\r\n      this.CustomerFoodInterestsCustomer = Response.CustomerFoodInterestsCustomer;\r\n      this.CustomerCallHistoryCustomer = Response.CustomerCallHistoryCustomer;\r\n      this.CustomerFoodInterestsCustomer.forEach(element => {\r\n        if (element.InterestId === 1) {\r\n          this.InterestedFood.push(element);\r\n        } else {\r\n          this.NotInterestedFood.push(element);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  // on init\r\n  ngOnInit() {}\r\n  // update transaction\r\n  UpdateTransaction() {\r\n    let TransactionStatusName;\r\n    this.CallStatus.forEach(element => {\r\n        if (element.TransactionStatusId === this.TransactionStatusID) {\r\n          TransactionStatusName = element.TransactionStatusName;\r\n          return;\r\n        }\r\n    });\r\n    this.CustomerCallHistoryCustomer.forEach((element, index) => {\r\n      if (this.CustomerCallHistoryCustomer[index].CustomerCallHistoryId === 0) {\r\n        this.CustomerCallHistoryCustomer.splice(index, 1);\r\n      }\r\n    });\r\n    this.CustomerCallHistoryCustomer.push({\r\n      CustomerCallHistoryId: 0,\r\n      TransactionDate: this.TransactionDate,\r\n      TransactionStatusId: this.TransactionStatusID,\r\n      TransactionStatusName: TransactionStatusName\r\n    });\r\n    this.CustomerBasicDetailsCustomer.TransactionStatusId = this.TransactionStatusID;\r\n  }\r\n  // save button click\r\n  SaveCustomerData() {\r\n    console.log(this.Customer);\r\n    return;\r\n    this.CheckUserNameAvailability();\r\n    if (this.SaveStatus === 0) {\r\n      this.openDialog();\r\n      this.popup.SetData({Message: 'Hang on', Status: '', Route: ''});\r\n      this.service.SaveUserDetails(this.Customer).subscribe(Response => {\r\n        if (Response.Status === true) {\r\n          this.popup.SetData({Message: 'Data Saved Successfully', Status: 'auto', Route: ''});\r\n        }\r\n      });\r\n    }\r\n  }\r\n  // open dialogue\r\n  openDialog(): void {\r\n    const dialogRef = this.dialog.open(DialogueComponent, {\r\n      width: '250px',\r\n      disableClose: true\r\n    });\r\n  // fires when dialogue closed\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      //\r\n    });\r\n  }\r\n}\r\n\r\nexport interface CustomerBasicDetails {\r\n  AlternatePhone;\r\n  BirthDate;\r\n  ChefId;\r\n  CivilId;\r\n  CustomerBasicDetailId;\r\n  CustomerId;\r\n  FirstName;\r\n  FoodDietTypeId;\r\n  GenderId;\r\n  JobTitle;\r\n  LastName;\r\n  LastUpdate;\r\n  MaritalStatus;\r\n  MaritalStatusId;\r\n  RegistrationDate;\r\n  TransactionStatusId;\r\n  UserId;\r\n  }\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { CustomerDetailsRoutingModule } from './customer-details-routing.module';\r\nimport { CustomerDetailsComponent } from './customer-details.component';\r\nimport { MatGridListModule, MatCardModule, MatTableModule, MatButtonModule, MatIconModule,\r\n  MatSelectModule, MatInputModule, MatTabsModule, MatDatepickerModule, MatNativeDateModule,\r\n  MatFormFieldModule, MatAutocompleteModule, MatChipsModule, MatRadioModule } from '@angular/material';\r\nimport { StatModule } from 'src/app/shared/modules/stat/stat.module';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { DialogueComponent } from '../../../shared/commmon/dialogue/dialogue.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [CustomerDetailsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    CustomerDetailsRoutingModule,\r\n    MatGridListModule,\r\n    StatModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatSelectModule,\r\n    MatInputModule,\r\n    MatTabsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatFormFieldModule,\r\n    MatAutocompleteModule,\r\n    MatChipsModule,\r\n    MatRadioModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule.withConfig({ addFlexToParent: false })\r\n  ],\r\n  entryComponents: []\r\n})\r\nexport class CustomerDetailsModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { CommonVariables } from 'src/app/shared/commmon';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/internal/operators/map';\r\nimport { CustomerBasics, CommonReplay, CommonResponse } from '../../../shared/commmon/ServiceClass';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CustomerDetailsService {\r\n\r\n  constructor(private util:CommonVariables,private http:HttpClient) {\r\n  }\r\n  \r\n  //get all dropdowns for customer form\r\n  GetCustomerDetailsDropdowns(){\r\n     let url=this.util.base_url+this.util.GetCustomerDropdowns;\r\n     return this.http.get<CommonReplay>(url).pipe(map((response: CommonReplay) => {\r\n      return response;\r\n    }));\r\n  }\r\n  //get Customer details for crm\r\n  GetCustomerDetailsForCRM(CustomerID){\r\n    let url=this.util.GetCustomerDetailsForCRM+CustomerID;\r\n    return this.http.get<CommonResponse>(url).pipe(map((response) => {\r\n      return response.Data;\r\n    }));\r\n  }\r\n  //save user details\r\n  SaveUserDetails(data){\r\n    let url=this.util.SaveUser;\r\n    let body=data;\r\n    return this.http.post<CommonResponse>(url,body).pipe(map((response) => {\r\n      return response;\r\n    }));\r\n  }\r\n  \r\n}\r\n\r\n"],"sourceRoot":""}