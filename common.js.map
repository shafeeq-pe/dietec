{"version":3,"sources":["webpack:///./src/app/layout/crm/crm.service.ts","webpack:///./src/app/layout/dietitian/dish-preparation/dish-preparation.service.ts","webpack:///./src/app/login/login.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { CommonResponse } from '../../shared/commmon/ServiceClass';\r\nimport { CommonVariables } from '../../shared/commmon';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CrmService {\r\n  constructor(private http:HttpClient,private util:CommonVariables) { }\r\n  //get customer call transaction and count\r\n  GetCustomerCallStatusCount(){\r\n    let url=this.util.GetCustomerCallTransactionCount;\r\n    return this.http.get<CommonResponse>(url).pipe(map((response: CommonResponse) => {\r\n      return response;\r\n    }));\r\n  }\r\n  //get chefs\r\n  GetChefs(){\r\n    let url=this.util.GetChefs;\r\n    return this.http.get<CommonResponse>(url).pipe(map((response:CommonResponse)=>{return response;}));\r\n  }\r\n  //get customer basic details\r\n  GetCustomerBasicDetails(body={}){\r\n    let url=this.util.GetCustomerBasicDetails;\r\n    return this.http.post<CommonResponse>(url,body).pipe(map((response:CommonResponse)=>{return response;}));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CommonVariables } from '../../../shared/commmon';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { CommonResponse } from '../../../shared/commmon/ServiceClass';\r\nimport { map } from 'rxjs/internal/operators/map';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DishPreparationService {\r\n\r\n  constructor(private util:CommonVariables,private http:HttpClient) { \r\n\r\n  }\r\n  //get page data for prepare food page\r\n  GetPrepareFoodPageData(){\r\n    let url=this.util.base_url+this.util.GetFoodPreparationLoadData;\r\n    return this.http.get<CommonResponse>(url).pipe(map((response: CommonResponse) => {\r\n     return response;\r\n   }));\r\n }\r\n //search food ingredient page\r\n SearchIngredients(name){\r\n   let url=this.util.base_url+this.util.SearchFoodIngredients+name; \r\n   return this.http.get(url).pipe(map((response: CommonResponse) => {\r\n    return response.Data;\r\n  }));\r\n }\r\n //get all food ingredients\r\n GetAllIngredients(){\r\n  let url=this.util.base_url+this.util.SearchFoodIngredients+name; \r\n  return this.http.get(url).pipe(map((response: CommonResponse) => {\r\n   return response.Data;\r\n }));\r\n}\r\n //get nutritions\r\n GetNutritions(){\r\n   let url=this.util.base_url+this.util.GetNutritions;\r\n   return this.http.get<CommonResponse>(url).pipe(map((response: CommonResponse) => {\r\n    return response;\r\n  }));\r\n }\r\n //save dish\r\n SaveDish(body){\r\n   let url=this.util.base_url+this.util.SaveDish;\r\n   return this.http.post<CommonResponse>(url,body).pipe(map((response: CommonResponse) => {\r\n    return response;\r\n  }));\r\n }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CommonVariables } from '../shared/commmon';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { CommonResponse } from '../shared/commmon/ServiceClass';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n\r\n  constructor(private util: CommonVariables, private http: HttpClient) { }\r\n  // register a customer\r\n  CustomerSignUp(body) {\r\n    const url = this.util.CustomerSignUp;\r\n    return this.http.post<CommonResponse>(url, body).pipe(map((response: CommonResponse) => response));\r\n  }\r\n  // login\r\n  UserLogin(body) {\r\n    const url = this.util.UserLogin;\r\n    return this.http.post<CommonResponse>(url, body).pipe(map((response: CommonResponse) => response));\r\n  }\r\n\r\n}\r\n"],"sourceRoot":""}